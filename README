================================================
 README file for Project 3 - Simple TCP
           Name(s): Dai Nguyen, Olsen Ong, Irwan Wiranto
================================================

References:
1. TCP State Diagram:
  https://en.wikipedia.org/wiki/File:Tcp_state_diagram_fixed.svg

2. RFC 793: Tranmission Control Protocol
  http://www.ietf.org/rfc/rfc793.txt


DESCRIBE YOUR CODE AND DESIGN DECISIONS HERE

General Decisions:
  1) Windows size is 3KB = 3072 Bytes
  2) Maximum sequence number from Random generator is 254, and minimum is 1
  3) Maximum MSS (Maximum Segment Size) is 536

// Dai
In order to clients and server talked together, a TCP Handshake must be
established. As we know that, TCP Handshake takes 1 and 1/2 RTT to create:
  1) Clients send SYN packet to server
  2) Sever responds back with SYN+ACK to client
  3) Clients send ACK packet to server, and the TCP Handshake completed

- send_SYN will call create_SYN_packet function to create SYN packet, then send
SYN packet to server

- wait_for_SYN_ACK will wait for SYN+ACK packet from server

- send_ACK will call create_ACK_packet function to create ACK packet, then send
ACK packet to server

STCPHeader *create_SYN_packet(unsigned int seq, unsigned int ack);
STCPHeader *create_SYN_ACK_packet(unsigned int seq, unsigned int ack);
STCPHeader *create_ACK_packet(unsigned int seq, unsigned int ack);

bool send_SYN(mysocket_t sd, context_t *ctx);
void wait_for_SYN_ACK(mysocket_t sd, context_t *ctx);
bool send_ACK(mysocket_t sd, context_t *ctx);

// Olsen
- Combined the whole teams parts into one 
- Fixed errors with variable and function definitions
- Fixed various errors preventing compilation
- Control loop implementation
  Wait for event
    4 Main types of events: 
    APP_DATA
    NETWORK_DATA
    APP_CLOSE_REQUESTED
    ANY_EVENT
  Handles duplicate packets
  

// Irwan

4 Way Handshake